package KBLayer;
import com.hp.hpl.jena.ontology.*;
import com.hp.hpl.jena.rdf.model.*;
import org.mindswap.pellet.jena.PelletReasonerFactory;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.Vector;

/*class contains model for manipulating the classes of an Ontological model*/
public class CreateModel {

	private String NS;
	private String upperNS;
	private OntModel model;


	/* constructor for memory model; namespace is the ontology namespace, filepath is the path to the ontology*/
	public CreateModel(String namespace,String filepath){
		NS = namespace;
		/*create an ontology model, to which we attach a Pellet Reasoner*/
		model = ModelFactory.createOntologyModel( PelletReasonerFactory.THE_SPEC );
	   //model = ModelFactory.createOntologyModel(OntModelSpec.OWL_DL_MEM_RULE_INF, null);
		model.read(filepath);

	}

	/* constructor for persistent model*/
	
	public CreateModel(OntModel m, String namespace){
		model=m;
		NS=namespace;
	}

	public OntModel getModel(){
		return this.model;
	}

	public String getNamespace(){
		return this.NS;
	}
	
	public String getUpperNamespace(){
		return this.upperNS;
	}

	/*returns a Vector of subclasses of a certain class*/
	public Vector getSubclasses(String cls, String NS){

		OntClass refClass = model.getOntClass(NS + cls);
		Vector classArray=new Vector();
		for (Iterator i = refClass.listSubClasses(); i.hasNext(); ) { 
			OntClass subClass = (OntClass) i.next();
			/*class Nothing should not be included, even if generated by the reasoner */
			if (!(subClass.getLocalName().equals("Nothing"))){
				classArray.add(subClass.getLocalName());
			}
		}
		return classArray;
	}
	
	/*returns a Vector of direct subclasses of a certain class*/
	public Vector getDirectSubclasses(String cls, String NS){

		OntClass refClass = model.getOntClass(NS + cls);
		Vector classArray=new Vector();
		for (Iterator i = refClass.listSubClasses(true); i.hasNext(); ) { 
			OntClass subClass = (OntClass) i.next();
			if (!(subClass.getLocalName().equals("Nothing"))){
				classArray.add(subClass.getLocalName());
			}
		}
		return classArray;
	}
	
	/*returns a Vector of Individuals of a certain class*/
	public Vector getIndividuals(String cls,String NS){
		OntClass refClass = model.getOntClass(NS + cls);
		Vector classArray=new Vector();
		for (Iterator i = refClass.listInstances(); i.hasNext(); ) { 
			Individual individual = (Individual) i.next(); 
			classArray.add(individual.getLocalName());
		}
		return classArray;
	}

	/*returns a List of Properties of a certain class*/
	public ArrayList getProperties(String cls,String NS){
		OntClass refclass = model.getOntClass(NS + cls);
		ArrayList<OntProperty> classArray = new ArrayList<OntProperty>();

		for (Iterator i = refclass.listDeclaredProperties(); i.hasNext(); )
		{
			OntProperty property=(OntProperty) i.next();
			classArray.add(property);
		}
		return classArray;
	}

	/*returns a Individual instance from an instanceName*/
	public Individual getIndividualFromURI(String localName,String NS){
		return model.getIndividual(NS+localName);
	}

	/*returns a Property instance from an instanceName*/
	public Property getPropertyFromURI(String localName,String NS){
		return model.getProperty(NS+localName);
	}

	/*returns a a property value for an Individual given by its instanceName*/
	public String getIndividualPropertyValue(String ind, String prop,String NS){
		Individual i =getIndividualFromURI(ind,NS);
		String uri=NS+prop;
		Property p=this.model.getProperty(uri);
		Literal lVal=null; 
		RDFNode val = i.getPropertyValue(p );
		if (val!=null){
			if (val instanceof Literal) {
				lVal = (Literal) val;
				//System.out.println("Literal"+lVal.getString());
				return (lVal.getString()); 
			}
			else {
				OntResource rVal = (OntResource) val.as( OntResource.class );
				//System.out.println("Resource"+rVal.getLocalName());
				return(rVal.getLocalName());	  
			}
		}
		else{
			//System.out.println("NULL- IndividualPropertyValue");
			return "";
		}
	}

	/*returns a Vector of allowable values for a property*/
	public Vector getAllowableValues(String prop, String NS) {
		String uri=NS+prop;
		OntProperty p=this.model.getOntProperty(uri);
		Vector valArray=new Vector();
		OntResource r = p.getRange();
		if (r != null) {
			if (r.isDataRange()) {
				DataRange dr = r.asDataRange();
				for (Iterator itr = dr.listOneOf(); itr.hasNext();) {
					Literal l = (Literal) itr.next();
					valArray.add(l.getString());
					
				}
			} else {
			}
		}
		return valArray;
	}

	/*returns an Individual instance, given its name and class*/
	public Individual createIndividual(String individualName, String individualClass,String NS) { 
		Resource res = model.getResource(NS+individualClass); 
		Individual ind=model.createIndividual(NS + individualName,res); 
		return ind;
	} 

	/*adds a property and a property value to an individual*/
	public void addPropertyValue(String propertyLiteral, String propertyName, String individualName,String NS) { 
		Individual ind = model.getIndividual(NS+individualName); 
		Property prop = model.getProperty(NS+propertyName); 
		ind.addProperty(prop,propertyLiteral); 
		} 

	/*sets a property and the property's value to an individual*/
	/*isLiteral indicates weather the property is a Literal or Resource*/ 
	public void setPropertyValue(String individualName, String property,String propertyValue, boolean isLiteral,String NS) {
		//System.out.println("TYPED LITERAL-setPropertyValue \n\n"+isLiteral);
		//System.out.println("indivName "+individualName);
		Individual ind = model.getIndividual(NS+ individualName);
		Property prop = model.getProperty(NS+property); 
		//System.out.println("ind "+ind+" prop "+prop);
		if (isLiteral){
			Literal l =model.createTypedLiteral(propertyValue);
			//System.out.println("TYPED LITERAL "+l.toString());
			ind.setPropertyValue(prop,l);
		}
		else{
			Resource sensorLocation = model.getResource(NS+propertyValue);
			ind.setPropertyValue(prop,sensorLocation);
		}
	}

	
}
